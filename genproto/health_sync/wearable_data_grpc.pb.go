// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: wearable_data.proto

package health_sync

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	WearableDateService_Create_FullMethodName = "/health_sync.WearableDateService/Create"
)

// WearableDateServiceClient is the client API for WearableDateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WearableDateServiceClient interface {
	Create(ctx context.Context, in *WearableDate, opts ...grpc.CallOption) (*Void, error)
}

type wearableDateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWearableDateServiceClient(cc grpc.ClientConnInterface) WearableDateServiceClient {
	return &wearableDateServiceClient{cc}
}

func (c *wearableDateServiceClient) Create(ctx context.Context, in *WearableDate, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, WearableDateService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WearableDateServiceServer is the server API for WearableDateService service.
// All implementations must embed UnimplementedWearableDateServiceServer
// for forward compatibility
type WearableDateServiceServer interface {
	Create(context.Context, *WearableDate) (*Void, error)
	mustEmbedUnimplementedWearableDateServiceServer()
}

// UnimplementedWearableDateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWearableDateServiceServer struct {
}

func (UnimplementedWearableDateServiceServer) Create(context.Context, *WearableDate) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedWearableDateServiceServer) mustEmbedUnimplementedWearableDateServiceServer() {}

// UnsafeWearableDateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WearableDateServiceServer will
// result in compilation errors.
type UnsafeWearableDateServiceServer interface {
	mustEmbedUnimplementedWearableDateServiceServer()
}

func RegisterWearableDateServiceServer(s grpc.ServiceRegistrar, srv WearableDateServiceServer) {
	s.RegisterService(&WearableDateService_ServiceDesc, srv)
}

func _WearableDateService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WearableDate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WearableDateServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WearableDateService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WearableDateServiceServer).Create(ctx, req.(*WearableDate))
	}
	return interceptor(ctx, in, info, handler)
}

// WearableDateService_ServiceDesc is the grpc.ServiceDesc for WearableDateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WearableDateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "health_sync.WearableDateService",
	HandlerType: (*WearableDateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _WearableDateService_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wearable_data.proto",
}
